"use strict";(globalThis.webpackChunkblog2=globalThis.webpackChunkblog2||[]).push([[7200],{34320:e=>{e.exports=JSON.parse('{"permalink":"/blog/Javascript-collections-implementation-in-ES6-heard-of-weakmap","source":"@site/blog/Javascript-collections-implementation-in-ES6-heard-of-weakmap.md","title":"Javascript collections implementation in ES6, heard of weakmap?","description":"Some alt text","date":"2021-06-11T00:46:34.000Z","tags":[],"readingTime":1.77,"hasTruncateMarker":true,"authors":[{"name":"D Balaji","title":"Lead Design Technologist","url":"https://github.com/dhbalaji","imageURL":"https://avatars.githubusercontent.com/u/3672491?v=4","key":"dhbalaji","page":null}],"frontMatter":{"title":"Javascript collections implementation in ES6, heard of weakmap?","categories":["frontend"],"date":"2021-06-11T00:46:34.000Z","authors":["dhbalaji"]},"unlisted":false,"prevItem":{"title":"Building and distributing lightweight NPM packages for react projects","permalink":"/blog/Building-and-distributing-light-weight-NPM-packages-for-react-projects"},"nextItem":{"title":"HTTP methods, timeout & ajax response types in Javascript discussed","permalink":"/blog/HTTP-methods-ajax-response-types-in-Javascript-discussed"}}')},44399:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/garbage-collection-c72cf704d6b6fff4b3cace06d574ce39.webp"},61021:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>c});var n=a(34320),s=a(47259),r=a(70497);const i={title:"Javascript collections implementation in ES6, heard of weakmap?",categories:["frontend"],date:new Date("2021-06-11T00:46:34.000Z"),authors:["dhbalaji"]},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Native data structures in JS",id:"native-data-structures-in-js",level:2},{value:"Map",id:"map",level:2},{value:"Set",id:"set",level:2},{value:"Weak as in easily garbage collected",id:"weak-as-in-easily-garbage-collected",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Some alt text",src:a(44399).A+"",width:"1920",height:"1440"})}),"\n",(0,s.jsx)(t.p,{children:"To implement a data structure in Javascript, we used Array or Object but things are set to change. We have 4 new entrants with ES6 or ECMAScript Harmony. They are Map, WeakMap, Set, and WeakSet. Let us look at each one of them in detail."}),"\n",(0,s.jsx)(t.h2,{id:"native-data-structures-in-js",children:"Native data structures in JS"}),"\n",(0,s.jsx)(t.p,{children:"Until ES5, the developers were building data structures with Arrays and Objects. Sometimes objects were used to make associative arrays, it's something like a double duty for the Object data type. That's why ES6 brings new data structures."}),"\n",(0,s.jsx)(t.p,{children:"The new data structures in ES6 fall under 2 categories, they are"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Weak"}),"\n",(0,s.jsx)(t.li,{children:"Non-weak versions"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"map",children:"Map"}),"\n",(0,s.jsxs)(t.p,{children:["Map is a set of key and value pairs and also remembers the order of the key. Read more about the difference between Object and Map here ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#objects_vs._maps",children:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#objects_vs._maps"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"var phoneBook = new Map();\nphoneBook.set(100, 100);\nphoneBook.set('JS-HQ' ,1001);\n\n// Map is iterable but Objects are not\n// Map can be cloned, merged\n\nphoneBook.size; // 2\n"})}),"\n",(0,s.jsx)(t.h2,{id:"set",children:"Set"}),"\n",(0,s.jsx)(t.p,{children:"Set is similar to an array but the items of the set must be unique."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"var array = [1,2,3,1];\nvar set = new Set(array);\nconsole.log(set); // {1, 2, 3} \n"})}),"\n",(0,s.jsx)(t.h2,{id:"weak-as-in-easily-garbage-collected",children:"Weak as in easily garbage collected"}),"\n",(0,s.jsx)(t.p,{children:"The last 2 new entrants are"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"WeakMap"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"WeakSet"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"We need to understand javascript garbage collection. An object is garbage collected when"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"The object is deallocated by setting to null"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"The object is no longer referenced"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"No keys, values, or entries of the Object exists. The entries in Map and Set count as references and the object is no longer garbage collected."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"In the case of weakmap and weakset, the object references are held weakly."}),"\n",(0,s.jsx)(t.p,{children:"In case of weakMap & weakSet, the objects are dereferenced when all other references are removed. Use these data structures when you are interested in better memory management."}),"\n",(0,s.jsx)(t.p,{children:"In a weak map, a key is always an object."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"The WeakMap is great for memos because once the object (used as the key) gets garbage collected, so does the computed value on the WeakMap."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},70497:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var n=a(96363);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);